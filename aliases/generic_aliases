# ----- Current -----
# File navigation
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../../'
function .. () {
    reg='^[0-9]+$'
    if [ -z "$1" ]; then
        cd ../..
    elif ! [[ $1 =~ $reg ]] ; then
        echo "Arg passed must be integer"
    elif [[ $PWD == *$HOME* ]]; then
        LEVEL=`echo "3 + $1" | bc`
        cd $(echo $PWD | cut -f1-$LEVEL -d '/')
    else
        LEVEL=`echo "1 + $1" | bc`
        cd $(echo $PWD | cut -f1-$LEVEL -d '/')
    fi
}

# File/directory size
alias dirsizesGB='sudo du -ha -d 1 . | grep "[0-9]\+[G]" | sort -hr'
alias dirsizesMB='sudo du -ha -d 1 . | grep "[0-9]\+[MG]" | sort -hr'
alias dirsizes='sudo du -ha -d 1 . | sort -hr'

alias rosenv='printenv | grep -i ROS'
function unsource_ros () {
    # ROS common
    unset ROS_VERSION
    unset ROS_PYTHON_VERSION
    unset ROS_DISTRO
    unset PYTHONPATH
    unset LD_LIBRARY_PATH
    unset PATH
    PATH=$DEFAULT_PATH

    # ROS 1
    unset ROS_PACKAGE_PATH
    unset ROSLISP_PACKAGE_DIRECTORIES
    unset ROS_ETC_DIR
    unset ROS_MASTER_URI
    unset ROS_ROOT
    unset CMAKE_PREFIX_PATH
    unset PKG_CONFIG_PATH
    unset ROS_LOCATIONS
    unset ROS_HOSTNAME
    unset ROS_NAMESPACE

    # ROS 2
    unset AMENT_PREFIX_PATH
    unset ROS_LOCALHOST_ONLY
    unset ROS_DOMAIN_ID
    unset PWD
    unset COLCON_PREFIX_PATH
}

# Docker
alias dxhost='xhost +si:localuser:root'
alias dcu='docker compose up -d'
alias dcd='docker compose down'
alias dcb='docker compose build'
alias dimg='docker image'
alias dcnt='docker container'
alias dload='docker load <'
alias noetic_docker='xhost +si:localuser:root && cd ~/env_setup/docker/noetic-desktop/ && docker compose up -d && docker exec -ti noetic-desktop bash'
function de () {
    xhost +si:localuser:root
    docker exec -ti $1 bash
}

# Pkgs
alias grepdpkg='dpkg -l | grep'

# Cuda
function cudaenv () {
    export CUDA_HOME="/usr/local/cuda-$1"
    export CD_LIBRARY_PATH="/usr/local/cuda-$1/bin:$PATH"
    export PATH="/usr/local/cuda-$1/bin:$PATH"
}

# SSH
alias sshkeygen='ssh-keygen -t rsa -b 4096'
function removesshkey () {
    sed -i '$1d' ~/.ssh/known_hosts
}

# Clock
alias reset_clock='invoke-rc.d chrony restart'
function sync_clock () {
    reg='^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'
    if ! [[ $1 =~ $reg ]] ; then
        echo "Arg passed must be IP address"
    else
        /etc/init.d/chrony stop
        sudo ntpdate $1
        /etc/init.d/chrony start
    fi

}
